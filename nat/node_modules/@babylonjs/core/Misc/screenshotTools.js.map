{"version":3,"file":"screenshotTools.js","sourceRoot":"","sources":["../../../sourceES6/core/Misc/screenshotTools.ts"],"names":[],"mappings":"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","sourcesContent":["import { Nullable } from \"../types\";\r\nimport { Camera } from \"../Cameras/camera\";\r\nimport { Texture } from \"../Materials/Textures/texture\";\r\nimport { RenderTargetTexture } from \"../Materials/Textures/renderTargetTexture\";\r\nimport { FxaaPostProcess } from \"../PostProcesses/fxaaPostProcess\";\r\n\r\nimport { Logger } from \"./logger\";\r\nimport { _TypeStore } from \"./typeStore\";\r\nimport { Tools } from \"./tools\";\r\nimport { IScreenshotSize } from './interfaces/screenshotSize';\r\n\r\ndeclare type Engine = import(\"../Engines/engine\").Engine;\r\n\r\n/**\r\n * Class containing a set of static utilities functions for screenshots\r\n */\r\nexport class ScreenshotTools {\r\n    /**\r\n     * Captures a screenshot of the current rendering\r\n     * @see http://doc.babylonjs.com/how_to/render_scene_on_a_png\r\n     * @param engine defines the rendering engine\r\n     * @param camera defines the source camera\r\n     * @param size This parameter can be set to a single number or to an object with the\r\n     * following (optional) properties: precision, width, height. If a single number is passed,\r\n     * it will be used for both width and height. If an object is passed, the screenshot size\r\n     * will be derived from the parameters. The precision property is a multiplier allowing\r\n     * rendering at a higher or lower resolution\r\n     * @param successCallback defines the callback receives a single parameter which contains the\r\n     * screenshot as a string of base64-encoded characters. This string can be assigned to the\r\n     * src parameter of an <img> to display it\r\n     * @param mimeType defines the MIME type of the screenshot image (default: image/png).\r\n     * Check your browser for supported MIME types\r\n     */\r\n    public static CreateScreenshot(engine: Engine, camera: Camera, size: IScreenshotSize | number, successCallback?: (data: string) => void, mimeType: string = \"image/png\"): void {\r\n        const { height, width } = ScreenshotTools._getScreenshotSize(engine, camera, size);\r\n\r\n        if (!(height && width)) {\r\n            Logger.Error(\"Invalid 'size' parameter !\");\r\n            return;\r\n        }\r\n\r\n        if (!Tools._ScreenshotCanvas) {\r\n            Tools._ScreenshotCanvas = document.createElement('canvas');\r\n        }\r\n\r\n        Tools._ScreenshotCanvas.width = width;\r\n        Tools._ScreenshotCanvas.height = height;\r\n\r\n        var renderContext = Tools._ScreenshotCanvas.getContext(\"2d\");\r\n\r\n        var ratio = engine.getRenderWidth() / engine.getRenderHeight();\r\n        var newWidth = width;\r\n        var newHeight = newWidth / ratio;\r\n        if (newHeight > height) {\r\n            newHeight = height;\r\n            newWidth = newHeight * ratio;\r\n        }\r\n\r\n        var offsetX = Math.max(0, width - newWidth) / 2;\r\n        var offsetY = Math.max(0, height - newHeight) / 2;\r\n\r\n        var renderingCanvas = engine.getRenderingCanvas();\r\n        if (renderContext && renderingCanvas) {\r\n            renderContext.drawImage(renderingCanvas, offsetX, offsetY, newWidth, newHeight);\r\n        }\r\n\r\n        Tools.EncodeScreenshotCanvasData(successCallback, mimeType);\r\n    }\r\n\r\n    /**\r\n     * Captures a screenshot of the current rendering\r\n     * @see http://doc.babylonjs.com/how_to/render_scene_on_a_png\r\n     * @param engine defines the rendering engine\r\n     * @param camera defines the source camera\r\n     * @param size This parameter can be set to a single number or to an object with the\r\n     * following (optional) properties: precision, width, height. If a single number is passed,\r\n     * it will be used for both width and height. If an object is passed, the screenshot size\r\n     * will be derived from the parameters. The precision property is a multiplier allowing\r\n     * rendering at a higher or lower resolution\r\n     * @param mimeType defines the MIME type of the screenshot image (default: image/png).\r\n     * Check your browser for supported MIME types\r\n     * @returns screenshot as a string of base64-encoded characters. This string can be assigned\r\n     * to the src parameter of an <img> to display it\r\n     */\r\n    public static CreateScreenshotAsync(engine: Engine, camera: Camera, size: any, mimeType: string = \"image/png\"): Promise<string> {\r\n        return new Promise((resolve, reject) => {\r\n            ScreenshotTools.CreateScreenshot(engine, camera, size, (data) => {\r\n                if (typeof(data) !== \"undefined\") {\r\n                    resolve(data);\r\n                } else {\r\n                    reject(new Error(\"Data is undefined\"));\r\n                }\r\n            }, mimeType);\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Generates an image screenshot from the specified camera.\r\n     * @see http://doc.babylonjs.com/how_to/render_scene_on_a_png\r\n     * @param engine The engine to use for rendering\r\n     * @param camera The camera to use for rendering\r\n     * @param size This parameter can be set to a single number or to an object with the\r\n     * following (optional) properties: precision, width, height. If a single number is passed,\r\n     * it will be used for both width and height. If an object is passed, the screenshot size\r\n     * will be derived from the parameters. The precision property is a multiplier allowing\r\n     * rendering at a higher or lower resolution\r\n     * @param successCallback The callback receives a single parameter which contains the\r\n     * screenshot as a string of base64-encoded characters. This string can be assigned to the\r\n     * src parameter of an <img> to display it\r\n     * @param mimeType The MIME type of the screenshot image (default: image/png).\r\n     * Check your browser for supported MIME types\r\n     * @param samples Texture samples (default: 1)\r\n     * @param antialiasing Whether antialiasing should be turned on or not (default: false)\r\n     * @param fileName A name for for the downloaded file.\r\n     */\r\n    public static CreateScreenshotUsingRenderTarget(engine: Engine, camera: Camera, size: IScreenshotSize | number, successCallback?: (data: string) => void, mimeType: string = \"image/png\", samples: number = 1, antialiasing: boolean = false, fileName?: string): void {\r\n        const { height, width } = ScreenshotTools._getScreenshotSize(engine, camera, size);\r\n        let targetTextureSize = { width, height };\r\n\r\n        if (!(height && width)) {\r\n            Logger.Error(\"Invalid 'size' parameter !\");\r\n            return;\r\n        }\r\n\r\n        var scene = camera.getScene();\r\n        var previousCamera: Nullable<Camera> = null;\r\n\r\n        if (scene.activeCamera !== camera) {\r\n            previousCamera = scene.activeCamera;\r\n            scene.activeCamera = camera;\r\n        }\r\n\r\n        var renderCanvas = engine.getRenderingCanvas();\r\n        if (!renderCanvas) {\r\n            Logger.Error(\"No rendering canvas found !\");\r\n            return;\r\n        }\r\n\r\n        var originalSize = { width: renderCanvas.width, height: renderCanvas.height };\r\n        engine.setSize(width, height);\r\n        scene.render();\r\n\r\n        // At this point size can be a number, or an object (according to engine.prototype.createRenderTargetTexture method)\r\n        var texture = new RenderTargetTexture(\"screenShot\", targetTextureSize, scene, false, false, 0, false, Texture.NEAREST_SAMPLINGMODE);\r\n        texture.renderList = null;\r\n        texture.samples = samples;\r\n        texture.onAfterRenderObservable.add(() => {\r\n            Tools.DumpFramebuffer(width, height, engine, successCallback, mimeType, fileName);\r\n        });\r\n\r\n        const renderToTexture = () => {\r\n            scene.incrementRenderId();\r\n            scene.resetCachedMaterial();\r\n            texture.render(true);\r\n            texture.dispose();\r\n\r\n            if (previousCamera) {\r\n                scene.activeCamera = previousCamera;\r\n            }\r\n            engine.setSize(originalSize.width, originalSize.height);\r\n            camera.getProjectionMatrix(true); // Force cache refresh;\r\n        };\r\n\r\n        if (antialiasing) {\r\n            const fxaaPostProcess = new FxaaPostProcess('antialiasing', 1.0, scene.activeCamera);\r\n            texture.addPostProcess(fxaaPostProcess);\r\n            // Async Shader Compilation can lead to none ready effects in synchronous code\r\n            if (!fxaaPostProcess.getEffect().isReady()) {\r\n                fxaaPostProcess.getEffect().onCompiled = () => {\r\n                    renderToTexture();\r\n                };\r\n            }\r\n            // The effect is ready we can render\r\n            else {\r\n                renderToTexture();\r\n            }\r\n        }\r\n        else {\r\n            // No need to wait for extra resources to be ready\r\n            renderToTexture();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Generates an image screenshot from the specified camera.\r\n     * @see http://doc.babylonjs.com/how_to/render_scene_on_a_png\r\n     * @param engine The engine to use for rendering\r\n     * @param camera The camera to use for rendering\r\n     * @param size This parameter can be set to a single number or to an object with the\r\n     * following (optional) properties: precision, width, height. If a single number is passed,\r\n     * it will be used for both width and height. If an object is passed, the screenshot size\r\n     * will be derived from the parameters. The precision property is a multiplier allowing\r\n     * rendering at a higher or lower resolution\r\n     * @param mimeType The MIME type of the screenshot image (default: image/png).\r\n     * Check your browser for supported MIME types\r\n     * @param samples Texture samples (default: 1)\r\n     * @param antialiasing Whether antialiasing should be turned on or not (default: false)\r\n     * @param fileName A name for for the downloaded file.\r\n     * @returns screenshot as a string of base64-encoded characters. This string can be assigned\r\n     * to the src parameter of an <img> to display it\r\n     */\r\n    public static CreateScreenshotUsingRenderTargetAsync(engine: Engine, camera: Camera, size: any, mimeType: string = \"image/png\", samples: number = 1, antialiasing: boolean = false, fileName?: string): Promise<string> {\r\n        return new Promise((resolve, reject) => {\r\n            ScreenshotTools.CreateScreenshotUsingRenderTarget(engine, camera, size, (data) => {\r\n                if (typeof(data) !== \"undefined\") {\r\n                    resolve(data);\r\n                } else {\r\n                    reject(new Error(\"Data is undefined\"));\r\n                }\r\n            }, mimeType, samples, antialiasing, fileName);\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Gets height and width for screenshot size\r\n     * @private\r\n     */\r\n    private static _getScreenshotSize(engine: Engine, camera: Camera, size: IScreenshotSize | number): {height: number, width: number} {\r\n        let height = 0;\r\n        let width = 0;\r\n\r\n        //If a size value defined as object\r\n        if (typeof(size) === 'object') {\r\n            const precision = size.precision\r\n              ? Math.abs(size.precision) // prevent GL_INVALID_VALUE : glViewport: negative width/height\r\n              : 1;\r\n\r\n            //If a width and height values is specified\r\n            if (size.width && size.height) {\r\n                height = size.height * precision;\r\n                width = size.width * precision;\r\n            }\r\n            //If passing only width, computing height to keep display canvas ratio.\r\n            else if (size.width && !size.height) {\r\n                width = size.width * precision;\r\n                height = Math.round(width / engine.getAspectRatio(camera));\r\n            }\r\n            //If passing only height, computing width to keep display canvas ratio.\r\n            else if (size.height && !size.width) {\r\n                height = size.height * precision;\r\n                width = Math.round(height * engine.getAspectRatio(camera));\r\n            }\r\n            else {\r\n                width = Math.round(engine.getRenderWidth() * precision);\r\n                height = Math.round(width / engine.getAspectRatio(camera));\r\n            }\r\n        }\r\n        //Assuming here that \"size\" parameter is a number\r\n        else if (!isNaN(size)) {\r\n            height = size;\r\n            width = size;\r\n        }\r\n\r\n        return { height, width };\r\n    }\r\n}\r\n\r\nTools.CreateScreenshot = ScreenshotTools.CreateScreenshot;\r\nTools.CreateScreenshotAsync = ScreenshotTools.CreateScreenshotAsync;\r\nTools.CreateScreenshotUsingRenderTarget = ScreenshotTools.CreateScreenshotUsingRenderTarget;\r\nTools.CreateScreenshotUsingRenderTargetAsync = ScreenshotTools.CreateScreenshotUsingRenderTargetAsync;\r\n"]}