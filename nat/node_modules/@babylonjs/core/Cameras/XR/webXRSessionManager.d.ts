import { Observable } from "../../Misc/observable";
import { Nullable } from "../../types";
import { IDisposable, Scene } from "../../scene";
import { RenderTargetTexture } from "../../Materials/Textures/renderTargetTexture";
import { WebXRRenderTarget, WebXRState } from './webXRTypes';
import { WebXRManagedOutputCanvasOptions } from './webXRManagedOutputCanvas';
/**
 * Manages an XRSession to work with Babylon's engine
 * @see https://doc.babylonjs.com/how_to/webxr
 */
export declare class WebXRSessionManager implements IDisposable {
    private scene;
    /**
     * Fires every time a new xrFrame arrives which can be used to update the camera
     */
    onXRFrameObservable: Observable<any>;
    /**
     * Fires when the xr session is ended either by the device or manually done
     */
    onXRSessionEnded: Observable<any>;
    /**
     * Underlying xr session
     */
    session: XRSession;
    /**
     * Type of reference space used when creating the session
     */
    referenceSpace: XRReferenceSpace;
    /**
     * Current XR frame
     */
    currentFrame: Nullable<XRFrame>;
    private _xrNavigator;
    private baseLayer;
    private _rttProvider;
    private _sessionEnded;
    /**
     * Constructs a WebXRSessionManager, this must be initialized within a user action before usage
     * @param scene The scene which the session should be created for
     */
    constructor(scene: Scene);
    /**
     * Initializes the manager
     * After initialization enterXR can be called to start an XR session
     * @returns Promise which resolves after it is initialized
     */
    initializeAsync(): Promise<void>;
    /**
     * Initializes an xr session
     * @param xrSessionMode mode to initialize
     * @param optionalFeatures defines optional values to pass to the session builder
     * @returns a promise which will resolve once the session has been initialized
     */
    initializeSessionAsync(xrSessionMode: XRSessionMode, optionalFeatures?: any): Promise<XRSession>;
    /**
     * Sets the reference space on the xr session
     * @param referenceSpace space to set
     * @returns a promise that will resolve once the reference space has been set
     */
    setReferenceSpaceAsync(referenceSpace: XRReferenceSpaceType): Promise<void>;
    /**
     * Updates the render state of the session
     * @param state state to set
     * @returns a promise that resolves once the render state has been updated
     */
    updateRenderStateAsync(state: XRRenderState): Promise<void>;
    /**
     * Starts rendering to the xr layer
     * @returns a promise that will resolve once rendering has started
     */
    startRenderingToXRAsync(): Promise<void>;
    /**
     * Gets the correct render target texture to be rendered this frame for this eye
     * @param eye the eye for which to get the render target
     * @returns the render target for the specified eye
     */
    getRenderTargetTextureForEye(eye: XREye): RenderTargetTexture;
    /**
     * Stops the xrSession and restores the renderloop
     * @returns Promise which resolves after it exits XR
     */
    exitXRAsync(): Promise<void>;
    /**
     * Checks if a session would be supported for the creation options specified
     * @param sessionMode session mode to check if supported eg. immersive-vr
     * @returns true if supported
     */
    supportsSessionAsync(sessionMode: XRSessionMode): any;
    /**
     * Creates a WebXRRenderTarget object for the XR session
     * @param onStateChangedObservable optional, mechanism for enabling/disabling XR rendering canvas, used only on Web
     * @param options optional options to provide when creating a new render target
     * @returns a WebXR render target to which the session can render
     */
    getWebXRRenderTarget(onStateChangedObservable?: Observable<WebXRState>, options?: WebXRManagedOutputCanvasOptions): WebXRRenderTarget;
    /**
     * @hidden
     * Converts the render layer of xrSession to a render target
     * @param session session to create render target for
     * @param scene scene the new render target should be created for
     */
    static _CreateRenderTargetTextureFromSession(session: XRSession, scene: Scene, baseLayer: XRWebGLLayer): RenderTargetTexture;
    /**
     * Disposes of the session manager
     */
    dispose(): void;
}
