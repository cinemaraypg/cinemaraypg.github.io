import { WebXRExperienceHelper } from "./webXRExperienceHelper";
import { Scene } from '../../scene';
import { WebXRInput } from './webXRInput';
import { WebXRControllerModelLoader } from './webXRControllerModelLoader';
import { WebXRControllerPointerSelection } from './webXRControllerPointerSelection';
import { WebXRControllerTeleportation } from './webXRControllerTeleportation';
import { WebXRRenderTarget } from './webXRTypes';
import { WebXREnterExitUI } from './webXREnterExitUI';
import { AbstractMesh } from '../../Meshes/abstractMesh';
import { WebXRManagedOutputCanvasOptions } from './webXRManagedOutputCanvas';
/**
 * Options for the default xr helper
 */
export declare class WebXRDefaultExperienceOptions {
    /**
     * Floor meshes that should be used for teleporting
     */
    floorMeshes: Array<AbstractMesh>;
    /**
     * Enable or disable default UI to enter XR
     */
    disableDefaultUI: boolean;
    /**
     * optional configuration for the output canvas
     */
    outputCanvasOptions?: WebXRManagedOutputCanvasOptions;
}
/**
 * Default experience which provides a similar setup to the previous webVRExperience
 */
export declare class WebXRDefaultExperience {
    /**
     * Base experience
     */
    baseExperience: WebXRExperienceHelper;
    /**
     * Input experience extension
     */
    input: WebXRInput;
    /**
     * Loads the controller models
     */
    controllerModelLoader: WebXRControllerModelLoader;
    /**
     * Enables laser pointer and selection
     */
    pointerSelection: WebXRControllerPointerSelection;
    /**
     * Enables teleportation
     */
    teleportation: WebXRControllerTeleportation;
    /**
     * Enables ui for enetering/exiting xr
     */
    enterExitUI: WebXREnterExitUI;
    /**
     * Default target xr should render to
     */
    renderTarget: WebXRRenderTarget;
    /**
     * Creates the default xr experience
     * @param scene scene
     * @param options options for basic configuration
     * @returns resulting WebXRDefaultExperience
     */
    static CreateAsync(scene: Scene, options: WebXRDefaultExperienceOptions): Promise<WebXRDefaultExperience>;
    private constructor();
    /**
     * DIsposes of the experience helper
     */
    dispose(): void;
}
