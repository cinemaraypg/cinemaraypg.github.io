{"version":3,"file":"webXRInput.js","sourceRoot":"","sources":["../../../../sourceES6/core/Cameras/XR/webXRInput.ts"],"names":[],"mappings":"AACA,OAAO,EAAY,UAAU,EAAE,MAAM,uBAAuB,CAAC;AAG7D,OAAO,EAAE,eAAe,EAAE,MAAM,mBAAmB,CAAC;AACpD,OAAO,EAAE,UAAU,EAAE,MAAM,cAAc,CAAC;AAE1C;;GAEG;AACH;IAgBI;;;OAGG;IACH;IACI;;OAEG;IACI,cAAqC;QAJhD,iBA8BC;QA1BU,mBAAc,GAAd,cAAc,CAAuB;QAvBhD;;WAEG;QACI,gBAAW,GAA2B,EAAE,CAAC;QAGhD;;WAEG;QACI,gCAA2B,GAAG,IAAI,UAAU,EAAmB,CAAC;QACvE;;WAEG;QACI,kCAA6B,GAAG,IAAI,UAAU,EAAmB,CAAC;QAsCjE,0BAAqB,GAAG,UAAC,KAA+B;YAC5D,KAAI,CAAC,wBAAwB,CAAC,KAAK,CAAC,KAAK,EAAE,KAAK,CAAC,OAAO,CAAC,CAAC;QAC9D,CAAC,CAAA;QA5BG,qCAAqC;QACrC,IAAI,CAAC,cAAc,GAAG,cAAc,CAAC,wBAAwB,CAAC,GAAG,CAAC,UAAC,CAAC;YAChE,IAAI,CAAC,KAAK,UAAU,CAAC,SAAS,EAAE;gBAC5B,KAAI,CAAC,wBAAwB,CAAC,EAAE,EAAE,KAAI,CAAC,WAAW,CAAC,GAAG,CAAC,UAAC,CAAC,IAAM,OAAO,CAAC,CAAC,WAAW,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;aAC5F;QACL,CAAC,CAAC,CAAC;QAEH,IAAI,CAAC,cAAc,GAAG,cAAc,CAAC,cAAc,CAAC,mBAAmB,CAAC,GAAG,CAAC;YACxE,IAAI,CAAC,cAAc,CAAC,cAAc,CAAC,YAAY,EAAE;gBAC7C,OAAO;aACV;YAED,0CAA0C;YAC1C,IAAI,KAAI,CAAC,WAAW,CAAC,MAAM,IAAI,CAAC,IAAI,cAAc,CAAC,cAAc,CAAC,OAAO,CAAC,YAAY,EAAE;gBACpF,KAAI,CAAC,wBAAwB,CAAC,cAAc,CAAC,cAAc,CAAC,OAAO,CAAC,YAAY,EAAE,EAAE,CAAC,CAAC;gBACtF,cAAc,CAAC,cAAc,CAAC,OAAO,CAAC,gBAAgB,CAAC,oBAAoB,EAAE,KAAI,CAAC,qBAAqB,CAAC,CAAC;aAC5G;YAED,8BAA8B;YAC9B,KAAI,CAAC,WAAW,CAAC,OAAO,CAAC,UAAC,UAAU;gBAChC,UAAU,CAAC,iBAAiB,CAAC,cAAc,CAAC,cAAc,CAAC,YAAa,EAAE,cAAc,CAAC,cAAc,CAAC,cAAc,CAAC,CAAC;YAC5H,CAAC,CAAC,CAAC;QAEP,CAAC,CAAC,CAAC;IACP,CAAC;IAMO,6CAAwB,GAAhC,UAAiC,SAA+B,EAAE,YAAkC;QAApG,iBA2BC;QA1BG,8CAA8C;QAC9C,IAAI,OAAO,GAAG,IAAI,CAAC,WAAW,CAAC,GAAG,CAAC,UAAC,CAAC,IAAM,OAAO,CAAC,CAAC,WAAW,CAAC,CAAC,CAAC,CAAC,CAAC;QACpE,KAAkB,UAAS,EAAT,uBAAS,EAAT,uBAAS,EAAT,IAAS,EAAE;YAAxB,IAAI,KAAK,kBAAA;YACV,IAAI,OAAO,CAAC,OAAO,CAAC,KAAK,CAAC,KAAK,CAAC,CAAC,EAAE;gBAC/B,IAAI,UAAU,GAAG,IAAI,eAAe,CAAC,IAAI,CAAC,cAAc,CAAC,MAAM,CAAC,MAAM,EAAE,KAAK,EAAE,IAAI,CAAC,cAAc,CAAC,SAAS,CAAC,CAAC;gBAC9G,IAAI,CAAC,WAAW,CAAC,IAAI,CAAC,UAAU,CAAC,CAAC;gBAClC,IAAI,CAAC,2BAA2B,CAAC,eAAe,CAAC,UAAU,CAAC,CAAC;aAChE;SACJ;QAED,mDAAmD;QACnD,IAAI,eAAe,GAA2B,EAAE,CAAC;QACjD,IAAI,kBAAkB,GAA2B,EAAE,CAAC;QACpD,IAAI,CAAC,WAAW,CAAC,OAAO,CAAC,UAAC,CAAC;YACvB,IAAI,YAAY,CAAC,OAAO,CAAC,CAAC,CAAC,WAAW,CAAC,KAAK,CAAC,CAAC,EAAE;gBAC5C,eAAe,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;aAC3B;iBAAK;gBACF,kBAAkB,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;aAC9B;QACL,CAAC,CAAC,CAAC;QACH,IAAI,CAAC,WAAW,GAAG,eAAe,CAAC;QACnC,kBAAkB,CAAC,OAAO,CAAC,UAAC,CAAC;YACzB,KAAI,CAAC,6BAA6B,CAAC,eAAe,CAAC,CAAC,CAAC,CAAC;YACtD,CAAC,CAAC,OAAO,EAAE,CAAC;QAChB,CAAC,CAAC,CAAC;IAEP,CAAC;IAED;;OAEG;IACI,4BAAO,GAAd;QACI,IAAI,CAAC,WAAW,CAAC,OAAO,CAAC,UAAC,CAAC;YACvB,CAAC,CAAC,OAAO,EAAE,CAAC;QAChB,CAAC,CAAC,CAAC;QACH,IAAI,CAAC,cAAc,CAAC,cAAc,CAAC,mBAAmB,CAAC,MAAM,CAAC,IAAI,CAAC,cAAc,CAAC,CAAC;QACnF,IAAI,CAAC,cAAc,CAAC,wBAAwB,CAAC,MAAM,CAAC,IAAI,CAAC,cAAc,CAAC,CAAC;IAC7E,CAAC;IACL,iBAAC;AAAD,CAAC,AA/FD,IA+FC","sourcesContent":["import { Nullable } from \"../../types\";\r\nimport { Observer, Observable } from \"../../Misc/observable\";\r\nimport { IDisposable } from \"../../scene\";\r\nimport { WebXRExperienceHelper } from \"./webXRExperienceHelper\";\r\nimport { WebXRController } from './webXRController';\r\nimport { WebXRState } from './webXRTypes';\r\n\r\n/**\r\n * XR input used to track XR inputs such as controllers/rays\r\n */\r\nexport class WebXRInput implements IDisposable {\r\n    /**\r\n     * XR controllers being tracked\r\n     */\r\n    public controllers: Array<WebXRController> = [];\r\n    private _frameObserver: Nullable<Observer<any>>;\r\n    private _stateObserver: Nullable<Observer<any>>;\r\n    /**\r\n     * Event when a controller has been connected/added\r\n     */\r\n    public onControllerAddedObservable = new Observable<WebXRController>();\r\n    /**\r\n     * Event when a controller has been removed/disconnected\r\n     */\r\n    public onControllerRemovedObservable = new Observable<WebXRController>();\r\n\r\n    /**\r\n     * Initializes the WebXRInput\r\n     * @param baseExperience experience helper which the input should be created for\r\n     */\r\n    public constructor(\r\n        /**\r\n         * Base experience the input listens to\r\n         */\r\n        public baseExperience: WebXRExperienceHelper\r\n    ) {\r\n        // Remove controllers when exiting XR\r\n        this._stateObserver = baseExperience.onStateChangedObservable.add((s) => {\r\n            if (s === WebXRState.NOT_IN_XR) {\r\n                this._addAndRemoveControllers([], this.controllers.map((c) => {return c.inputSource; }));\r\n            }\r\n        });\r\n\r\n        this._frameObserver = baseExperience.sessionManager.onXRFrameObservable.add(() => {\r\n            if (!baseExperience.sessionManager.currentFrame) {\r\n                return;\r\n            }\r\n\r\n            // Start listing to input add/remove event\r\n            if (this.controllers.length == 0 && baseExperience.sessionManager.session.inputSources) {\r\n                this._addAndRemoveControllers(baseExperience.sessionManager.session.inputSources, []);\r\n                baseExperience.sessionManager.session.addEventListener(\"inputsourceschange\", this._onInputSourcesChange);\r\n            }\r\n\r\n            // Update controller pose info\r\n            this.controllers.forEach((controller) => {\r\n                controller.updateFromXRFrame(baseExperience.sessionManager.currentFrame!, baseExperience.sessionManager.referenceSpace);\r\n            });\r\n\r\n        });\r\n    }\r\n\r\n    private _onInputSourcesChange = (event: XRInputSourceChangeEvent) => {\r\n        this._addAndRemoveControllers(event.added, event.removed);\r\n    }\r\n\r\n    private _addAndRemoveControllers(addInputs: Array<XRInputSource>, removeInputs: Array<XRInputSource>) {\r\n        // Add controllers if they don't already exist\r\n        let sources = this.controllers.map((c) => {return c.inputSource; });\r\n        for (let input of addInputs) {\r\n            if (sources.indexOf(input) === -1) {\r\n                let controller = new WebXRController(this.baseExperience.camera._scene, input, this.baseExperience.container);\r\n                this.controllers.push(controller);\r\n                this.onControllerAddedObservable.notifyObservers(controller);\r\n            }\r\n        }\r\n\r\n        // Remove and dispose of controllers to be disposed\r\n        let keepControllers: Array<WebXRController> = [];\r\n        let removedControllers: Array<WebXRController> = [];\r\n        this.controllers.forEach((c) => {\r\n            if (removeInputs.indexOf(c.inputSource) === -1) {\r\n                keepControllers.push(c);\r\n            }else {\r\n                removedControllers.push(c);\r\n            }\r\n        });\r\n        this.controllers = keepControllers;\r\n        removedControllers.forEach((c) => {\r\n            this.onControllerRemovedObservable.notifyObservers(c);\r\n            c.dispose();\r\n        });\r\n\r\n    }\r\n\r\n    /**\r\n     * Disposes of the object\r\n     */\r\n    public dispose() {\r\n        this.controllers.forEach((c) => {\r\n            c.dispose();\r\n        });\r\n        this.baseExperience.sessionManager.onXRFrameObservable.remove(this._frameObserver);\r\n        this.baseExperience.onStateChangedObservable.remove(this._stateObserver);\r\n    }\r\n}"]}