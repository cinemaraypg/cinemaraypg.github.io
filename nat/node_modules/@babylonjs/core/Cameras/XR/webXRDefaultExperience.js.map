{"version":3,"file":"webXRDefaultExperience.js","sourceRoot":"","sources":["../../../../sourceES6/core/Cameras/XR/webXRDefaultExperience.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,qBAAqB,EAAE,MAAM,yBAAyB,CAAC;AAEhE,OAAO,EAAE,UAAU,EAAE,MAAM,cAAc,CAAC;AAC1C,OAAO,EAAE,0BAA0B,EAAE,MAAM,8BAA8B,CAAC;AAC1E,OAAO,EAAE,+BAA+B,EAAE,MAAM,mCAAmC,CAAC;AACpF,OAAO,EAAE,4BAA4B,EAAE,MAAM,gCAAgC,CAAC;AAE9E,OAAO,EAAE,gBAAgB,EAAE,MAAM,oBAAoB,CAAC;AAItD;;GAEG;AACH;IAAA;IAeA,CAAC;IAAD,oCAAC;AAAD,CAAC,AAfD,IAeC;;AAED;;GAEG;AACH;IAoEI;IAEA,CAAC;IAxCD;;;;;OAKG;IACW,kCAAW,GAAzB,UAA0B,KAAY,EAAE,OAAsC;QAC1E,IAAI,MAAM,GAAG,IAAI,sBAAsB,EAAE,CAAC;QAE1C,yBAAyB;QACzB,OAAO,qBAAqB,CAAC,WAAW,CAAC,KAAK,CAAC,CAAC,IAAI,CAAC,UAAC,QAAQ;YAC1D,MAAM,CAAC,cAAc,GAAG,QAAQ,CAAC;YAEjC,yBAAyB;YACzB,MAAM,CAAC,KAAK,GAAG,IAAI,UAAU,CAAC,QAAQ,CAAC,CAAC;YACxC,MAAM,CAAC,qBAAqB,GAAG,IAAI,0BAA0B,CAAC,MAAM,CAAC,KAAK,CAAC,CAAC;YAC5E,MAAM,CAAC,gBAAgB,GAAG,IAAI,+BAA+B,CAAC,MAAM,CAAC,KAAK,CAAC,CAAC;YAE5E,IAAI,OAAO,CAAC,WAAW,EAAE;gBACrB,MAAM,CAAC,aAAa,GAAG,IAAI,4BAA4B,CAAC,MAAM,CAAC,KAAK,EAAE,OAAO,CAAC,WAAW,CAAC,CAAC;aAC9F;YAED,iCAAiC;YACjC,MAAM,CAAC,YAAY,GAAG,MAAM,CAAC,cAAc,CAAC,cAAc,CAAC,oBAAoB,CAAC,QAAQ,CAAC,wBAAwB,EAAE,OAAO,CAAC,mBAAmB,CAAC,CAAC;YAEhJ,IAAI,CAAC,OAAO,CAAC,gBAAgB,EAAE;gBAC3B,oCAAoC;gBACpC,OAAO,gBAAgB,CAAC,WAAW,CAAC,KAAK,EAAE,MAAM,CAAC,cAAc,EAAE,EAAE,YAAY,EAAE,MAAM,CAAC,YAAY,EAAE,CAAC,CAAC,IAAI,CAAC,UAAC,EAAE;oBAC7G,MAAM,CAAC,WAAW,GAAG,EAAE,CAAC;gBAC5B,CAAC,CAAC,CAAC;aACN;iBAAM;gBACH,OAAO;aACV;QACL,CAAC,CAAC,CAAC,IAAI,CAAC;YACJ,OAAO,MAAM,CAAC;QAClB,CAAC,CAAC,CAAC;IACP,CAAC;IAMD;;OAEG;IACI,wCAAO,GAAd;QACI,IAAI,IAAI,CAAC,cAAc,EAAE;YACrB,IAAI,CAAC,cAAc,CAAC,OAAO,EAAE,CAAC;SACjC;QACD,IAAI,IAAI,CAAC,KAAK,EAAE;YACZ,IAAI,CAAC,KAAK,CAAC,OAAO,EAAE,CAAC;SACxB;QACD,IAAI,IAAI,CAAC,WAAW,EAAE;YAClB,IAAI,CAAC,WAAW,CAAC,OAAO,EAAE,CAAC;SAC9B;QACD,IAAI,IAAI,CAAC,YAAY,EAAE;YACnB,IAAI,CAAC,YAAY,CAAC,OAAO,EAAE,CAAC;SAC/B;IACL,CAAC;IACL,6BAAC;AAAD,CAAC,AAzFD,IAyFC","sourcesContent":["import { WebXRExperienceHelper } from \"./webXRExperienceHelper\";\r\nimport { Scene } from '../../scene';\r\nimport { WebXRInput } from './webXRInput';\r\nimport { WebXRControllerModelLoader } from './webXRControllerModelLoader';\r\nimport { WebXRControllerPointerSelection } from './webXRControllerPointerSelection';\r\nimport { WebXRControllerTeleportation } from './webXRControllerTeleportation';\r\nimport { WebXRRenderTarget } from './webXRTypes';\r\nimport { WebXREnterExitUI } from './webXREnterExitUI';\r\nimport { AbstractMesh } from '../../Meshes/abstractMesh';\r\nimport { WebXRManagedOutputCanvasOptions } from './webXRManagedOutputCanvas';\r\n\r\n/**\r\n * Options for the default xr helper\r\n */\r\nexport class WebXRDefaultExperienceOptions {\r\n    /**\r\n     * Floor meshes that should be used for teleporting\r\n     */\r\n    public floorMeshes: Array<AbstractMesh>;\r\n\r\n    /**\r\n     * Enable or disable default UI to enter XR\r\n     */\r\n    public disableDefaultUI: boolean;\r\n\r\n    /**\r\n     * optional configuration for the output canvas\r\n     */\r\n    public outputCanvasOptions? : WebXRManagedOutputCanvasOptions;\r\n}\r\n\r\n/**\r\n * Default experience which provides a similar setup to the previous webVRExperience\r\n */\r\nexport class WebXRDefaultExperience {\r\n    /**\r\n     * Base experience\r\n     */\r\n    public baseExperience: WebXRExperienceHelper;\r\n    /**\r\n     * Input experience extension\r\n     */\r\n    public input: WebXRInput;\r\n    /**\r\n     * Loads the controller models\r\n     */\r\n    public controllerModelLoader: WebXRControllerModelLoader;\r\n    /**\r\n     * Enables laser pointer and selection\r\n     */\r\n    public pointerSelection: WebXRControllerPointerSelection;\r\n    /**\r\n     * Enables teleportation\r\n     */\r\n    public teleportation: WebXRControllerTeleportation;\r\n    /**\r\n     * Enables ui for enetering/exiting xr\r\n     */\r\n    public enterExitUI: WebXREnterExitUI;\r\n    /**\r\n     * Default target xr should render to\r\n     */\r\n    public renderTarget: WebXRRenderTarget;\r\n\r\n    /**\r\n     * Creates the default xr experience\r\n     * @param scene scene\r\n     * @param options options for basic configuration\r\n     * @returns resulting WebXRDefaultExperience\r\n     */\r\n    public static CreateAsync(scene: Scene, options: WebXRDefaultExperienceOptions) {\r\n        var result = new WebXRDefaultExperience();\r\n\r\n        // Create base experience\r\n        return WebXRExperienceHelper.CreateAsync(scene).then((xrHelper) => {\r\n            result.baseExperience = xrHelper;\r\n\r\n            // Add controller support\r\n            result.input = new WebXRInput(xrHelper);\r\n            result.controllerModelLoader = new WebXRControllerModelLoader(result.input);\r\n            result.pointerSelection = new WebXRControllerPointerSelection(result.input);\r\n\r\n            if (options.floorMeshes) {\r\n                result.teleportation = new WebXRControllerTeleportation(result.input, options.floorMeshes);\r\n            }\r\n\r\n            // Create the WebXR output target\r\n            result.renderTarget = result.baseExperience.sessionManager.getWebXRRenderTarget(xrHelper.onStateChangedObservable, options.outputCanvasOptions);\r\n\r\n            if (!options.disableDefaultUI) {\r\n                // Create ui for entering/exiting xr\r\n                return WebXREnterExitUI.CreateAsync(scene, result.baseExperience, { renderTarget: result.renderTarget }).then((ui) => {\r\n                    result.enterExitUI = ui;\r\n                });\r\n            } else {\r\n                return;\r\n            }\r\n        }).then(() => {\r\n            return result;\r\n        });\r\n    }\r\n\r\n    private constructor() {\r\n\r\n    }\r\n\r\n    /**\r\n     * DIsposes of the experience helper\r\n     */\r\n    public dispose() {\r\n        if (this.baseExperience) {\r\n            this.baseExperience.dispose();\r\n        }\r\n        if (this.input) {\r\n            this.input.dispose();\r\n        }\r\n        if (this.enterExitUI) {\r\n            this.enterExitUI.dispose();\r\n        }\r\n        if (this.renderTarget) {\r\n            this.renderTarget.dispose();\r\n        }\r\n    }\r\n}"]}