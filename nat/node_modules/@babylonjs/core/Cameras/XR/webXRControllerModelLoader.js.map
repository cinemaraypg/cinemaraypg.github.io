{"version":3,"file":"webXRControllerModelLoader.js","sourceRoot":"","sources":["../../../../sourceES6/core/Cameras/XR/webXRControllerModelLoader.ts"],"names":[],"mappings":"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","sourcesContent":["import { Quaternion, Vector3 } from '../../Maths/math.vector';\r\nimport { WindowsMotionController } from '../../Gamepads/Controllers/windowsMotionController';\r\nimport { OculusTouchController } from '../../Gamepads/Controllers/oculusTouchController';\r\nimport { WebXRInput } from './webXRInput';\r\nimport { ViveController } from '../../Gamepads/Controllers/viveController';\r\nimport { WebVRController } from '../../Gamepads/Controllers/webVRController';\r\nimport { Observable } from '../../Misc/observable';\r\nimport { WebXRController } from './webXRController';\r\n\r\n/**\r\n * Loads a controller model and adds it as a child of the WebXRControllers grip when the controller is created\r\n */\r\nexport class WebXRControllerModelLoader {\r\n\r\n    /**\r\n     * an observable that triggers when a new model (the mesh itself) was initialized.\r\n     * To know when the mesh was loaded use the controller's own modelLoaded() method\r\n     */\r\n    public onControllerModelLoaded = new Observable<WebXRController>();\r\n    /**\r\n     * Creates the WebXRControllerModelLoader\r\n     * @param input xr input that creates the controllers\r\n     */\r\n    constructor(input: WebXRInput) {\r\n        input.onControllerAddedObservable.add((c) => {\r\n            if (!c.inputSource.gamepad) {\r\n                return;\r\n            }\r\n\r\n            let controllerModel: WebVRController;\r\n\r\n            let rotation: Quaternion;\r\n            const position = new Vector3();\r\n\r\n            switch (c.inputSource.gamepad.id) {\r\n                case \"htc-vive\": {\r\n                    controllerModel = new ViveController(c.inputSource.gamepad);\r\n                    rotation = Quaternion.FromEulerAngles(0, Math.PI, 0);\r\n                    break;\r\n                }\r\n                case \"oculus-touch\": {\r\n                    controllerModel = new OculusTouchController(c.inputSource.gamepad);\r\n                    rotation = Quaternion.FromEulerAngles(0, Math.PI, 0);\r\n                    position.y = 0.034;\r\n                    position.z = 0.052;\r\n                    break;\r\n                }\r\n                case \"oculus-quest\": {\r\n                    OculusTouchController._IsQuest = true;\r\n                    controllerModel = new OculusTouchController(c.inputSource.gamepad);\r\n                    rotation = Quaternion.FromEulerAngles(Math.PI / -4, Math.PI, 0);\r\n                    break;\r\n                }\r\n                default: {\r\n                    controllerModel = new WindowsMotionController(c.inputSource.gamepad);\r\n                    rotation = Quaternion.FromEulerAngles(0, Math.PI, 0);\r\n                    break;\r\n                }\r\n            }\r\n\r\n            controllerModel.hand = c.inputSource.handedness;\r\n            controllerModel.isXR = true;\r\n            controllerModel.initControllerMesh(c.getScene(), (m) => {\r\n                controllerModel.mesh!.parent = c.grip || input.baseExperience.container;\r\n                controllerModel.mesh!.rotationQuaternion = rotation;\r\n                controllerModel.mesh!.position = position;\r\n                m.isPickable = false;\r\n                m.getChildMeshes(false).forEach((m) => {\r\n                    m.isPickable = false;\r\n                });\r\n                this.onControllerModelLoaded.notifyObservers(c);\r\n            });\r\n\r\n            c.gamepadController = controllerModel;\r\n        });\r\n    }\r\n}"]}