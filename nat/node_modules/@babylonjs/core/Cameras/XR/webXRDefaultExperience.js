import { WebXRExperienceHelper } from "./webXRExperienceHelper";
import { WebXRInput } from './webXRInput';
import { WebXRControllerModelLoader } from './webXRControllerModelLoader';
import { WebXRControllerPointerSelection } from './webXRControllerPointerSelection';
import { WebXRControllerTeleportation } from './webXRControllerTeleportation';
import { WebXREnterExitUI } from './webXREnterExitUI';
/**
 * Options for the default xr helper
 */
var WebXRDefaultExperienceOptions = /** @class */ (function () {
    function WebXRDefaultExperienceOptions() {
    }
    return WebXRDefaultExperienceOptions;
}());
export { WebXRDefaultExperienceOptions };
/**
 * Default experience which provides a similar setup to the previous webVRExperience
 */
var WebXRDefaultExperience = /** @class */ (function () {
    function WebXRDefaultExperience() {
    }
    /**
     * Creates the default xr experience
     * @param scene scene
     * @param options options for basic configuration
     * @returns resulting WebXRDefaultExperience
     */
    WebXRDefaultExperience.CreateAsync = function (scene, options) {
        var result = new WebXRDefaultExperience();
        // Create base experience
        return WebXRExperienceHelper.CreateAsync(scene).then(function (xrHelper) {
            result.baseExperience = xrHelper;
            // Add controller support
            result.input = new WebXRInput(xrHelper);
            result.controllerModelLoader = new WebXRControllerModelLoader(result.input);
            result.pointerSelection = new WebXRControllerPointerSelection(result.input);
            if (options.floorMeshes) {
                result.teleportation = new WebXRControllerTeleportation(result.input, options.floorMeshes);
            }
            // Create the WebXR output target
            result.renderTarget = result.baseExperience.sessionManager.getWebXRRenderTarget(xrHelper.onStateChangedObservable, options.outputCanvasOptions);
            if (!options.disableDefaultUI) {
                // Create ui for entering/exiting xr
                return WebXREnterExitUI.CreateAsync(scene, result.baseExperience, { renderTarget: result.renderTarget }).then(function (ui) {
                    result.enterExitUI = ui;
                });
            }
            else {
                return;
            }
        }).then(function () {
            return result;
        });
    };
    /**
     * DIsposes of the experience helper
     */
    WebXRDefaultExperience.prototype.dispose = function () {
        if (this.baseExperience) {
            this.baseExperience.dispose();
        }
        if (this.input) {
            this.input.dispose();
        }
        if (this.enterExitUI) {
            this.enterExitUI.dispose();
        }
        if (this.renderTarget) {
            this.renderTarget.dispose();
        }
    };
    return WebXRDefaultExperience;
}());
export { WebXRDefaultExperience };
//# sourceMappingURL=webXRDefaultExperience.js.map