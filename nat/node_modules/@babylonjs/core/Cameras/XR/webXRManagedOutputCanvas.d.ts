import { Nullable } from "../../types";
import { Observable } from "../../Misc/observable";
import { ThinEngine } from '../../Engines/thinEngine';
import { WebXRState, WebXRRenderTarget } from "./webXRTypes";
/**
 * COnfiguration object for WebXR output canvas
 */
export declare class WebXRManagedOutputCanvasOptions {
    /**
     * Options for this XR Layer output
     */
    canvasOptions: XRWebGLLayerOptions;
    /**
     * CSS styling for a newly created canvas (if not provided)
     */
    newCanvasCssStyle?: string;
    /**
     * Get the default values of the configuration object
     * @returns default values of this configuration object
     */
    static GetDefaults(): WebXRManagedOutputCanvasOptions;
}
/**
 * Creates a canvas that is added/removed from the webpage when entering/exiting XR
 */
export declare class WebXRManagedOutputCanvas implements WebXRRenderTarget {
    private configuration;
    private _engine;
    private _canvas;
    /**
     * xrpresent context of the canvas which can be used to display/mirror xr content
     */
    canvasContext: WebGLRenderingContext;
    /**
     * xr layer for the canvas
     */
    xrLayer: Nullable<XRWebGLLayer>;
    /**
     * Initializes the xr layer for the session
     * @param xrSession xr session
     * @returns a promise that will resolve once the XR Layer has been created
     */
    initializeXRLayerAsync(xrSession: any): any;
    /**
     * Initializes the canvas to be added/removed upon entering/exiting xr
     * @param engine the Babylon engine
     * @param canvas The canvas to be added/removed (If not specified a full screen canvas will be created)
     * @param onStateChangedObservable the mechanism by which the canvas will be added/removed based on XR state
     * @param configuration optional configuration for this canvas output. defaults will be used if not provided
     */
    constructor(engine: ThinEngine, canvas?: HTMLCanvasElement, onStateChangedObservable?: Observable<WebXRState>, configuration?: WebXRManagedOutputCanvasOptions);
    /**
     * Disposes of the object
     */
    dispose(): void;
    private _setManagedOutputCanvas;
    private _addCanvas;
    private _removeCanvas;
}
