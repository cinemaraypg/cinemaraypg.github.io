import { Quaternion, Vector3 } from '../../Maths/math.vector';
import { WindowsMotionController } from '../../Gamepads/Controllers/windowsMotionController';
import { OculusTouchController } from '../../Gamepads/Controllers/oculusTouchController';
import { ViveController } from '../../Gamepads/Controllers/viveController';
import { Observable } from '../../Misc/observable';
/**
 * Loads a controller model and adds it as a child of the WebXRControllers grip when the controller is created
 */
var WebXRControllerModelLoader = /** @class */ (function () {
    /**
     * Creates the WebXRControllerModelLoader
     * @param input xr input that creates the controllers
     */
    function WebXRControllerModelLoader(input) {
        var _this = this;
        /**
         * an observable that triggers when a new model (the mesh itself) was initialized.
         * To know when the mesh was loaded use the controller's own modelLoaded() method
         */
        this.onControllerModelLoaded = new Observable();
        input.onControllerAddedObservable.add(function (c) {
            if (!c.inputSource.gamepad) {
                return;
            }
            var controllerModel;
            var rotation;
            var position = new Vector3();
            switch (c.inputSource.gamepad.id) {
                case "htc-vive": {
                    controllerModel = new ViveController(c.inputSource.gamepad);
                    rotation = Quaternion.FromEulerAngles(0, Math.PI, 0);
                    break;
                }
                case "oculus-touch": {
                    controllerModel = new OculusTouchController(c.inputSource.gamepad);
                    rotation = Quaternion.FromEulerAngles(0, Math.PI, 0);
                    position.y = 0.034;
                    position.z = 0.052;
                    break;
                }
                case "oculus-quest": {
                    OculusTouchController._IsQuest = true;
                    controllerModel = new OculusTouchController(c.inputSource.gamepad);
                    rotation = Quaternion.FromEulerAngles(Math.PI / -4, Math.PI, 0);
                    break;
                }
                default: {
                    controllerModel = new WindowsMotionController(c.inputSource.gamepad);
                    rotation = Quaternion.FromEulerAngles(0, Math.PI, 0);
                    break;
                }
            }
            controllerModel.hand = c.inputSource.handedness;
            controllerModel.isXR = true;
            controllerModel.initControllerMesh(c.getScene(), function (m) {
                controllerModel.mesh.parent = c.grip || input.baseExperience.container;
                controllerModel.mesh.rotationQuaternion = rotation;
                controllerModel.mesh.position = position;
                m.isPickable = false;
                m.getChildMeshes(false).forEach(function (m) {
                    m.isPickable = false;
                });
                _this.onControllerModelLoaded.notifyObservers(c);
            });
            c.gamepadController = controllerModel;
        });
    }
    return WebXRControllerModelLoader;
}());
export { WebXRControllerModelLoader };
//# sourceMappingURL=webXRControllerModelLoader.js.map