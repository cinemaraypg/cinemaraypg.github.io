{"version":3,"file":"webXRControllerTeleportation.js","sourceRoot":"","sources":["../../../../sourceES6/core/Cameras/XR/webXRControllerTeleportation.ts"],"names":[],"mappings":"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","sourcesContent":["import { AbstractMesh } from \"../../Meshes/abstractMesh\";\r\nimport { Quaternion, Vector3 } from '../../Maths/math.vector';\r\nimport { Mesh } from '../../Meshes/mesh';\r\nimport { Ray } from '../../Culling/ray';\r\nimport { StandardMaterial } from '../../Materials/standardMaterial';\r\nimport { DynamicTexture } from '../../Materials/Textures/dynamicTexture';\r\nimport { EasingFunction, SineEase } from '../../Animations/easing';\r\nimport { Animation } from '../../Animations/animation';\r\nimport { WebXRInput } from './webXRInput';\r\n\r\n/**\r\n * Enables teleportation\r\n */\r\nexport class WebXRControllerTeleportation {\r\n    private _teleportationFillColor: string = \"#444444\";\r\n    private _teleportationBorderColor: string = \"#FFFFFF\";\r\n\r\n    private _tmpRay = new Ray(new Vector3(), new Vector3());\r\n    private _tmpVector = new Vector3();\r\n\r\n    /**\r\n     * Creates a WebXRControllerTeleportation\r\n     * @param input input manager to add teleportation to\r\n     * @param floorMeshes floormeshes which can be teleported to\r\n     */\r\n    constructor(input: WebXRInput, floorMeshes: Array<AbstractMesh> = []) {\r\n        input.onControllerAddedObservable.add((c) => {\r\n            let scene = c.pointer.getScene();\r\n\r\n            let forwardReadyToTeleport = false;\r\n            let backwardReadyToTeleport = false;\r\n            let leftReadyToTeleport = false;\r\n            let rightReadyToTeleport = false;\r\n\r\n            // Teleport target abd it's animation\r\n            let teleportationTarget = Mesh.CreateGround(\"teleportationTarget\", 2, 2, 2, scene);\r\n            teleportationTarget.isPickable = false;\r\n            let length = 512;\r\n            let dynamicTexture = new DynamicTexture(\"DynamicTexture\", length, scene, true);\r\n            dynamicTexture.hasAlpha = true;\r\n            let context = dynamicTexture.getContext();\r\n            let centerX = length / 2;\r\n            let centerY = length / 2;\r\n            let radius = 200;\r\n            context.beginPath();\r\n            context.arc(centerX, centerY, radius, 0, 2 * Math.PI, false);\r\n            context.fillStyle = this._teleportationFillColor;\r\n            context.fill();\r\n            context.lineWidth = 10;\r\n            context.strokeStyle = this._teleportationBorderColor;\r\n            context.stroke();\r\n            context.closePath();\r\n            dynamicTexture.update();\r\n            let teleportationCircleMaterial = new StandardMaterial(\"TextPlaneMaterial\", scene);\r\n            teleportationCircleMaterial.diffuseTexture = dynamicTexture;\r\n            teleportationTarget.material = teleportationCircleMaterial;\r\n            let torus = Mesh.CreateTorus(\"torusTeleportation\", 0.75, 0.1, 25, scene, false);\r\n            torus.isPickable = false;\r\n            torus.parent = teleportationTarget;\r\n            let animationInnerCircle = new Animation(\"animationInnerCircle\", \"position.y\", 30, Animation.ANIMATIONTYPE_FLOAT, Animation.ANIMATIONLOOPMODE_CYCLE);\r\n            let keys = [];\r\n            keys.push({\r\n                frame: 0,\r\n                value: 0\r\n            });\r\n            keys.push({\r\n                frame: 30,\r\n                value: 0.4\r\n            });\r\n            keys.push({\r\n                frame: 60,\r\n                value: 0\r\n            });\r\n            animationInnerCircle.setKeys(keys);\r\n            let easingFunction = new SineEase();\r\n            easingFunction.setEasingMode(EasingFunction.EASINGMODE_EASEINOUT);\r\n            animationInnerCircle.setEasingFunction(easingFunction);\r\n            torus.animations = [];\r\n            torus.animations.push(animationInnerCircle);\r\n            scene.beginAnimation(torus, 0, 60, true);\r\n\r\n            // Handle user input on every frame\r\n            let renderObserver = scene.onBeforeRenderObservable.add(() => {\r\n                // Move the teleportationTarget to where the user is targetting to teleport to\r\n                if (forwardReadyToTeleport) {\r\n                    c.getWorldPointerRayToRef(this._tmpRay);\r\n                    let pick = scene.pickWithRay(this._tmpRay, (o) => {\r\n                        return floorMeshes.indexOf(o) !== -1;\r\n                    });\r\n                    if (pick && pick.pickedPoint) {\r\n                        // To avoid z-fighting\r\n                        teleportationTarget.position.copyFrom(pick.pickedPoint);\r\n                        teleportationTarget.position.y += 0.002;\r\n                    }\r\n                    teleportationTarget.isVisible = true;\r\n                    (<Mesh>teleportationTarget.getChildren()[0]).isVisible = true;\r\n                } else {\r\n                    teleportationTarget.isVisible = false;\r\n                    (<Mesh>teleportationTarget.getChildren()[0]).isVisible = false;\r\n                }\r\n\r\n                if (c.inputSource.gamepad) {\r\n                    if (c.inputSource.gamepad.axes[1] !== undefined) {\r\n                        // Forward teleportation\r\n                        if (c.inputSource.gamepad.axes[1] < -0.7) {\r\n                            forwardReadyToTeleport = true;\r\n                        } else {\r\n                            if (forwardReadyToTeleport) {\r\n                                // Teleport the users feet to where they targetted\r\n                                this._tmpVector.copyFrom(teleportationTarget.position);\r\n                                this._tmpVector.y += input.baseExperience.camera.position.y;\r\n                                input.baseExperience.setPositionOfCameraUsingContainer(this._tmpVector);\r\n                            }\r\n                            forwardReadyToTeleport = false;\r\n                        }\r\n\r\n                        // Backward teleportation\r\n                        if (c.inputSource.gamepad.axes[1] > 0.7) {\r\n                            backwardReadyToTeleport = true;\r\n                        } else {\r\n                            if (backwardReadyToTeleport) {\r\n                                // Cast a ray down from behind the user\r\n                                let camMat = input.baseExperience.camera.computeWorldMatrix();\r\n                                let q = new Quaternion();\r\n                                camMat.decompose(undefined, q, this._tmpRay.origin);\r\n                                this._tmpVector.set(0, 0, -1);\r\n                                this._tmpVector.rotateByQuaternionToRef(q, this._tmpVector);\r\n                                this._tmpVector.y = 0;\r\n                                this._tmpVector.normalize();\r\n                                this._tmpVector.y = -1.5;\r\n                                this._tmpVector.normalize();\r\n                                this._tmpRay.direction.copyFrom(this._tmpVector);\r\n                                let pick = scene.pickWithRay(this._tmpRay, (o) => {\r\n                                    return floorMeshes.indexOf(o) !== -1;\r\n                                });\r\n\r\n                                if (pick && pick.pickedPoint) {\r\n                                    // Teleport the users feet to where they targetted\r\n                                    this._tmpVector.copyFrom(pick.pickedPoint);\r\n                                    this._tmpVector.y += input.baseExperience.camera.position.y;\r\n                                    input.baseExperience.setPositionOfCameraUsingContainer(this._tmpVector);\r\n                                }\r\n                            }\r\n                            backwardReadyToTeleport = false;\r\n                        }\r\n                    }\r\n\r\n                    if (c.inputSource.gamepad.axes[0] !== undefined) {\r\n                        if (c.inputSource.gamepad.axes[0] < -0.7) {\r\n                            leftReadyToTeleport = true;\r\n                        } else {\r\n                            if (leftReadyToTeleport) {\r\n                                input.baseExperience.rotateCameraByQuaternionUsingContainer(Quaternion.FromEulerAngles(0, -Math.PI / 4, 0));\r\n                            }\r\n                            leftReadyToTeleport = false;\r\n                        }\r\n                        if (c.inputSource.gamepad.axes[0] > 0.7) {\r\n                            rightReadyToTeleport = true;\r\n                        } else {\r\n                            if (rightReadyToTeleport) {\r\n                                input.baseExperience.rotateCameraByQuaternionUsingContainer(Quaternion.FromEulerAngles(0, Math.PI / 4, 0));\r\n                            }\r\n                            rightReadyToTeleport = false;\r\n                        }\r\n                    }\r\n\r\n                }\r\n            });\r\n\r\n            c.onDisposeObservable.addOnce(() => {\r\n                teleportationTarget.dispose();\r\n                dynamicTexture.dispose();\r\n                teleportationCircleMaterial.dispose();\r\n                torus.dispose();\r\n\r\n                scene.onBeforeRenderObservable.remove(renderObserver);\r\n            });\r\n        });\r\n    }\r\n\r\n}"]}