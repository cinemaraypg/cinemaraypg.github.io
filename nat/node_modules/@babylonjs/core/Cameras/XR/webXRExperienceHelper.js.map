{"version":3,"file":"webXRExperienceHelper.js","sourceRoot":"","sources":["../../../../sourceES6/core/Cameras/XR/webXRExperienceHelper.ts"],"names":[],"mappings":"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","sourcesContent":["import { Nullable } from \"../../types\";\r\nimport { Observable } from \"../../Misc/observable\";\r\nimport { IDisposable, Scene } from \"../../scene\";\r\nimport { Quaternion, Vector3 } from \"../../Maths/math.vector\";\r\nimport { AbstractMesh } from \"../../Meshes/abstractMesh\";\r\nimport { Camera } from \"../../Cameras/camera\";\r\nimport { WebXRSessionManager } from \"./webXRSessionManager\";\r\nimport { WebXRCamera } from \"./webXRCamera\";\r\nimport { WebXRState, WebXRRenderTarget } from './webXRTypes';\r\n\r\n/**\r\n * Base set of functionality needed to create an XR experince (WebXRSessionManager, Camera, StateManagement, etc.)\r\n * @see https://doc.babylonjs.com/how_to/webxr\r\n */\r\nexport class WebXRExperienceHelper implements IDisposable {\r\n    /**\r\n     * Container which stores the xr camera and controllers as children. This can be used to move the camera/user as the camera's position is updated by the xr device\r\n     */\r\n    public container: AbstractMesh;\r\n    /**\r\n     * Camera used to render xr content\r\n     */\r\n    public camera: WebXRCamera;\r\n\r\n    /**\r\n     * The current state of the XR experience (eg. transitioning, in XR or not in XR)\r\n     */\r\n    public state: WebXRState = WebXRState.NOT_IN_XR;\r\n\r\n    private _setState(val: WebXRState) {\r\n        this.state = val;\r\n        this.onStateChangedObservable.notifyObservers(this.state);\r\n    }\r\n\r\n    private static _TmpVector = new Vector3();\r\n\r\n    /**\r\n     * Fires when the state of the experience helper has changed\r\n     */\r\n    public onStateChangedObservable = new Observable<WebXRState>();\r\n\r\n    /** Session manager used to keep track of xr session */\r\n    public sessionManager: WebXRSessionManager;\r\n\r\n    private _nonVRCamera: Nullable<Camera> = null;\r\n    private _originalSceneAutoClear = true;\r\n\r\n    private _supported = false;\r\n\r\n    /**\r\n     * Creates the experience helper\r\n     * @param scene the scene to attach the experience helper to\r\n     * @returns a promise for the experience helper\r\n     */\r\n    public static CreateAsync(scene: Scene): Promise<WebXRExperienceHelper> {\r\n        var helper = new WebXRExperienceHelper(scene);\r\n        return helper.sessionManager.initializeAsync().then(() => {\r\n            helper._supported = true;\r\n            return helper;\r\n        }).catch(() => {\r\n            return helper;\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Creates a WebXRExperienceHelper\r\n     * @param scene The scene the helper should be created in\r\n     */\r\n    private constructor(private scene: Scene) {\r\n        this.camera = new WebXRCamera(\"\", scene);\r\n        this.sessionManager = new WebXRSessionManager(scene);\r\n        this.container = new AbstractMesh(\"WebXR Container\", scene);\r\n        this.camera.parent = this.container;\r\n\r\n        scene.onDisposeObservable.add(() => {\r\n            this.exitXRAsync();\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Exits XR mode and returns the scene to its original state\r\n     * @returns promise that resolves after xr mode has exited\r\n     */\r\n    public exitXRAsync() {\r\n        this._setState(WebXRState.EXITING_XR);\r\n        return this.sessionManager.exitXRAsync();\r\n    }\r\n\r\n    /**\r\n     * Enters XR mode (This must be done within a user interaction in most browsers eg. button click)\r\n     * @param sessionMode options for the XR session\r\n     * @param referenceSpaceType frame of reference of the XR session\r\n     * @param renderTarget the output canvas that will be used to enter XR mode\r\n     * @returns promise that resolves after xr mode has entered\r\n     */\r\n    public enterXRAsync(sessionMode: XRSessionMode, referenceSpaceType: XRReferenceSpaceType, renderTarget: WebXRRenderTarget): Promise<WebXRSessionManager> {\r\n        if (!this._supported) {\r\n            throw \"XR session not supported by this browser\";\r\n        }\r\n        this._setState(WebXRState.ENTERING_XR);\r\n        let sessionCreationOptions = {\r\n            optionalFeatures: (referenceSpaceType !== \"viewer\" && referenceSpaceType !== \"local\") ? [referenceSpaceType] : []\r\n        };\r\n        return this.sessionManager.initializeSessionAsync(sessionMode, sessionCreationOptions).then(() => {\r\n            return this.sessionManager.setReferenceSpaceAsync(referenceSpaceType);\r\n        }).then(() => {\r\n            return renderTarget.initializeXRLayerAsync(this.sessionManager.session);\r\n        }).then(() => {\r\n            return this.sessionManager.updateRenderStateAsync({ depthFar: this.camera.maxZ, depthNear: this.camera.minZ, baseLayer: renderTarget.xrLayer! });\r\n        }).then(() => {\r\n            return this.sessionManager.startRenderingToXRAsync();\r\n        }).then(() => {\r\n            // Cache pre xr scene settings\r\n            this._originalSceneAutoClear = this.scene.autoClear;\r\n            this._nonVRCamera = this.scene.activeCamera;\r\n\r\n            // Overwrite current scene settings\r\n            this.scene.autoClear = false;\r\n            this.scene.activeCamera = this.camera;\r\n\r\n            this.sessionManager.onXRFrameObservable.add(() => {\r\n                this.camera.updateFromXRSessionManager(this.sessionManager);\r\n            });\r\n\r\n            this.sessionManager.onXRSessionEnded.addOnce(() => {\r\n                // Reset camera rigs output render target to ensure sessions render target is not drawn after it ends\r\n                this.camera.rigCameras.forEach((c) => {\r\n                    c.outputRenderTarget = null;\r\n                });\r\n\r\n                // Restore scene settings\r\n                this.scene.autoClear = this._originalSceneAutoClear;\r\n                this.scene.activeCamera = this._nonVRCamera;\r\n\r\n                this._setState(WebXRState.NOT_IN_XR);\r\n            });\r\n\r\n            // Wait until the first frame arrives before setting state to in xr\r\n            this.sessionManager.onXRFrameObservable.addOnce(() => {\r\n                this._setState(WebXRState.IN_XR);\r\n            });\r\n\r\n            return this.sessionManager;\r\n        }).catch((e: any) => {\r\n            console.log(e);\r\n            console.log(e.message);\r\n            throw(e);\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Updates the global position of the camera by moving the camera's container\r\n     * This should be used instead of modifying the camera's position as it will be overwritten by an xrSessions's update frame\r\n     * @param position The desired global position of the camera\r\n     */\r\n    public setPositionOfCameraUsingContainer(position: Vector3) {\r\n        this.camera.globalPosition.subtractToRef(position, WebXRExperienceHelper._TmpVector);\r\n        this.container.position.subtractInPlace(WebXRExperienceHelper._TmpVector);\r\n    }\r\n\r\n    /**\r\n     * Rotates the xr camera by rotating the camera's container around the camera's position\r\n     * This should be used instead of modifying the camera's rotation as it will be overwritten by an xrSessions's update frame\r\n     * @param rotation the desired quaternion rotation to apply to the camera\r\n     */\r\n    public rotateCameraByQuaternionUsingContainer(rotation: Quaternion) {\r\n        if (!this.container.rotationQuaternion) {\r\n            this.container.rotationQuaternion = Quaternion.FromEulerVector(this.container.rotation);\r\n        }\r\n        this.container.rotationQuaternion.multiplyInPlace(rotation);\r\n        this.container.position.rotateByQuaternionAroundPointToRef(rotation, this.camera.globalPosition, this.container.position);\r\n    }\r\n\r\n    /**\r\n     * Disposes of the experience helper\r\n     */\r\n    public dispose() {\r\n        this.camera.dispose();\r\n        this.container.dispose();\r\n        this.onStateChangedObservable.clear();\r\n        this.sessionManager.dispose();\r\n    }\r\n}"]}