import { NodeMaterialBlock } from '../../nodeMaterialBlock';
import { NodeMaterialBuildState } from '../../nodeMaterialBuildState';
import { NodeMaterialConnectionPoint } from '../../nodeMaterialBlockConnectionPoint';
import { AbstractMesh } from '../../../../Meshes/abstractMesh';
import { NodeMaterial, NodeMaterialDefines } from '../../nodeMaterial';
import { Effect } from '../../../effect';
import { Mesh } from '../../../../Meshes/mesh';
import { Light } from '../../../../Lights/light';
import { Nullable } from '../../../../types';
import { Scene } from '../../../../scene';
import "../../../../Shaders/ShadersInclude/lightFragmentDeclaration";
import "../../../../Shaders/ShadersInclude/lightUboDeclaration";
import "../../../../Shaders/ShadersInclude/lightFragment";
import "../../../../Shaders/ShadersInclude/helperFunctions";
import "../../../../Shaders/ShadersInclude/lightsFragmentFunctions";
import "../../../../Shaders/ShadersInclude/shadowsFragmentFunctions";
import "../../../../Shaders/ShadersInclude/shadowsVertex";
/**
 * Block used to add light in the fragment shader
 */
export declare class LightBlock extends NodeMaterialBlock {
    private _lightId;
    /**
     * Gets or sets the light associated with this block
     */
    light: Nullable<Light>;
    /**
     * Create a new LightBlock
     * @param name defines the block name
     */
    constructor(name: string);
    /**
     * Gets the current class name
     * @returns the class name
     */
    getClassName(): string;
    /**
     * Gets the world position input component
     */
    readonly worldPosition: NodeMaterialConnectionPoint;
    /**
     * Gets the world normal input component
     */
    readonly worldNormal: NodeMaterialConnectionPoint;
    /**
    * Gets the camera (or eye) position component
    */
    readonly cameraPosition: NodeMaterialConnectionPoint;
    /**
    * Gets the glossiness component
    */
    readonly glossiness: NodeMaterialConnectionPoint;
    /**
    * Gets the glossinness power component
    */
    readonly glossPower: NodeMaterialConnectionPoint;
    /**
    * Gets the diffuse color component
    */
    readonly diffuseColor: NodeMaterialConnectionPoint;
    /**
    * Gets the specular color component
    */
    readonly specularColor: NodeMaterialConnectionPoint;
    /**
     * Gets the diffuse output component
     */
    readonly diffuseOutput: NodeMaterialConnectionPoint;
    /**
     * Gets the specular output component
     */
    readonly specularOutput: NodeMaterialConnectionPoint;
    autoConfigure(material: NodeMaterial): void;
    prepareDefines(mesh: AbstractMesh, nodeMaterial: NodeMaterial, defines: NodeMaterialDefines): void;
    updateUniformsAndSamples(state: NodeMaterialBuildState, nodeMaterial: NodeMaterial, defines: NodeMaterialDefines, uniformBuffers: string[]): void;
    bind(effect: Effect, nodeMaterial: NodeMaterial, mesh?: Mesh): void;
    private _injectVertexCode;
    protected _buildBlock(state: NodeMaterialBuildState): this | undefined;
    serialize(): any;
    _deserialize(serializationObject: any, scene: Scene, rootUrl: string): void;
}
