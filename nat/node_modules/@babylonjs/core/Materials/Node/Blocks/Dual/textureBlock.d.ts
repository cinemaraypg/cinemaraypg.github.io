import { NodeMaterialBlock } from '../../nodeMaterialBlock';
import { NodeMaterialBuildState } from '../../nodeMaterialBuildState';
import { NodeMaterialBlockTargets } from '../../Enums/nodeMaterialBlockTargets';
import { NodeMaterialConnectionPoint } from '../../nodeMaterialBlockConnectionPoint';
import { AbstractMesh } from '../../../../Meshes/abstractMesh';
import { NodeMaterial, NodeMaterialDefines } from '../../nodeMaterial';
import { Effect } from '../../../effect';
import { Mesh } from '../../../../Meshes/mesh';
import { Nullable } from '../../../../types';
import { Texture } from '../../../Textures/texture';
import { Scene } from '../../../../scene';
import "../../../../Shaders/ShadersInclude/helperFunctions";
/**
 * Block used to read a texture from a sampler
 */
export declare class TextureBlock extends NodeMaterialBlock {
    private _defineName;
    private _linearDefineName;
    private _tempTextureRead;
    private _samplerName;
    private _transformedUVName;
    private _textureTransformName;
    private _textureInfoName;
    private _mainUVName;
    private _mainUVDefineName;
    /**
     * Gets or sets the texture associated with the node
     */
    texture: Nullable<Texture>;
    /**
     * Create a new TextureBlock
     * @param name defines the block name
     */
    constructor(name: string);
    /**
     * Gets the current class name
     * @returns the class name
     */
    getClassName(): string;
    /**
     * Gets the uv input component
     */
    readonly uv: NodeMaterialConnectionPoint;
    /**
     * Gets the rgba output component
     */
    readonly rgba: NodeMaterialConnectionPoint;
    /**
     * Gets the rgb output component
     */
    readonly rgb: NodeMaterialConnectionPoint;
    /**
     * Gets the r output component
     */
    readonly r: NodeMaterialConnectionPoint;
    /**
     * Gets the g output component
     */
    readonly g: NodeMaterialConnectionPoint;
    /**
     * Gets the b output component
     */
    readonly b: NodeMaterialConnectionPoint;
    /**
     * Gets the a output component
     */
    readonly a: NodeMaterialConnectionPoint;
    readonly target: NodeMaterialBlockTargets;
    autoConfigure(material: NodeMaterial): void;
    initializeDefines(mesh: AbstractMesh, nodeMaterial: NodeMaterial, defines: NodeMaterialDefines, useInstances?: boolean): void;
    prepareDefines(mesh: AbstractMesh, nodeMaterial: NodeMaterial, defines: NodeMaterialDefines): void;
    isReady(): boolean;
    bind(effect: Effect, nodeMaterial: NodeMaterial, mesh?: Mesh): void;
    private readonly _isMixed;
    private _injectVertexCode;
    private _writeTextureRead;
    private _writeOutput;
    protected _buildBlock(state: NodeMaterialBuildState): this | undefined;
    protected _dumpPropertiesCode(): string;
    serialize(): any;
    _deserialize(serializationObject: any, scene: Scene, rootUrl: string): void;
}
