import { __extends } from "tslib";
import { NodeMaterialBlock } from '../nodeMaterialBlock';
import { NodeMaterialBlockConnectionPointTypes } from '../Enums/nodeMaterialBlockConnectionPointTypes';
import { NodeMaterialBlockTargets } from '../Enums/nodeMaterialBlockTargets';
import { _TypeStore } from '../../../Misc/typeStore';
/**
 * Block used to create a Vector2/3/4 out of individual inputs (one for each component)
 */
var VectorMergerBlock = /** @class */ (function (_super) {
    __extends(VectorMergerBlock, _super);
    /**
     * Create a new VectorMergerBlock
     * @param name defines the block name
     */
    function VectorMergerBlock(name) {
        var _this = _super.call(this, name, NodeMaterialBlockTargets.Neutral) || this;
        _this.registerInput("x", NodeMaterialBlockConnectionPointTypes.Float);
        _this.registerInput("y", NodeMaterialBlockConnectionPointTypes.Float);
        _this.registerInput("z", NodeMaterialBlockConnectionPointTypes.Float, true);
        _this.registerInput("w", NodeMaterialBlockConnectionPointTypes.Float, true);
        _this.registerOutput("xyzw", NodeMaterialBlockConnectionPointTypes.Vector4);
        _this.registerOutput("xyz", NodeMaterialBlockConnectionPointTypes.Vector3);
        _this.registerOutput("xy", NodeMaterialBlockConnectionPointTypes.Vector2);
        return _this;
    }
    /**
     * Gets the current class name
     * @returns the class name
     */
    VectorMergerBlock.prototype.getClassName = function () {
        return "VectorMergerBlock";
    };
    Object.defineProperty(VectorMergerBlock.prototype, "x", {
        /**
         * Gets the x component (input)
         */
        get: function () {
            return this._inputs[0];
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(VectorMergerBlock.prototype, "y", {
        /**
         * Gets the y component (input)
         */
        get: function () {
            return this._inputs[1];
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(VectorMergerBlock.prototype, "z", {
        /**
         * Gets the z component (input)
         */
        get: function () {
            return this._inputs[2];
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(VectorMergerBlock.prototype, "w", {
        /**
         * Gets the w component (input)
         */
        get: function () {
            return this._inputs[3];
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(VectorMergerBlock.prototype, "xyzw", {
        /**
         * Gets the xyzw component (output)
         */
        get: function () {
            return this._outputs[0];
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(VectorMergerBlock.prototype, "xyz", {
        /**
         * Gets the xyz component (output)
         */
        get: function () {
            return this._outputs[1];
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(VectorMergerBlock.prototype, "xy", {
        /**
         * Gets the xy component (output)
         */
        get: function () {
            return this._outputs[2];
        },
        enumerable: true,
        configurable: true
    });
    VectorMergerBlock.prototype._buildBlock = function (state) {
        _super.prototype._buildBlock.call(this, state);
        var xInput = this.x;
        var yInput = this.y;
        var zInput = this.z;
        var wInput = this.w;
        var v4Output = this._outputs[0];
        var v3Output = this._outputs[1];
        var v2Output = this._outputs[2];
        if (v4Output.hasEndpoints) {
            state.compilationString += this._declareOutput(v4Output, state) + (" = vec4(" + this._writeVariable(xInput) + ", " + this._writeVariable(yInput) + ", " + (zInput.isConnected ? this._writeVariable(zInput) : "0.0") + ", " + (zInput.isConnected ? this._writeVariable(wInput) : "0.0") + ");\r\n");
        }
        else if (v3Output.hasEndpoints) {
            state.compilationString += this._declareOutput(v3Output, state) + (" = vec3(" + this._writeVariable(xInput) + ", " + this._writeVariable(yInput) + ", " + (zInput.isConnected ? this._writeVariable(zInput) : "0.0") + ");\r\n");
        }
        else if (v2Output.hasEndpoints) {
            state.compilationString += this._declareOutput(v2Output, state) + (" = vec2(" + this._writeVariable(xInput) + ", " + this._writeVariable(yInput) + ");\r\n");
        }
        return this;
    };
    return VectorMergerBlock;
}(NodeMaterialBlock));
export { VectorMergerBlock };
_TypeStore.RegisteredTypes["BABYLON.VectorMergerBlock"] = VectorMergerBlock;
//# sourceMappingURL=vectorMergerBlock.js.map