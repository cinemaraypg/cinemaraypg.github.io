import { NodeMaterialBlock } from '../../nodeMaterialBlock';
import { NodeMaterialConnectionPoint } from '../../nodeMaterialBlockConnectionPoint';
import { NodeMaterialBuildState } from '../../nodeMaterialBuildState';
import { AbstractMesh } from '../../../../Meshes/abstractMesh';
import { NodeMaterial, NodeMaterialDefines } from '../../nodeMaterial';
/**
 * Block used to add support for instances
 * @see https://doc.babylonjs.com/how_to/how_to_use_instances
 */
export declare class InstancesBlock extends NodeMaterialBlock {
    /**
     * Creates a new InstancesBlock
     * @param name defines the block name
     */
    constructor(name: string);
    /**
     * Gets the current class name
     * @returns the class name
     */
    getClassName(): string;
    /**
     * Gets the first world row input component
     */
    readonly world0: NodeMaterialConnectionPoint;
    /**
     * Gets the second world row input component
     */
    readonly world1: NodeMaterialConnectionPoint;
    /**
     * Gets the third world row input component
     */
    readonly world2: NodeMaterialConnectionPoint;
    /**
     * Gets the forth world row input component
     */
    readonly world3: NodeMaterialConnectionPoint;
    /**
     * Gets the world input component
     */
    readonly world: NodeMaterialConnectionPoint;
    /**
     * Gets the output component
     */
    readonly output: NodeMaterialConnectionPoint;
    autoConfigure(material: NodeMaterial): void;
    prepareDefines(mesh: AbstractMesh, nodeMaterial: NodeMaterial, defines: NodeMaterialDefines, useInstances?: boolean): void;
    protected _buildBlock(state: NodeMaterialBuildState): this;
}
