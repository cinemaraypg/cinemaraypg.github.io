import { NodeMaterialBlock } from '../../nodeMaterialBlock';
import { NodeMaterialBuildState } from '../../nodeMaterialBuildState';
import { AbstractMesh } from '../../../../Meshes/abstractMesh';
import { Mesh } from '../../../../Meshes/mesh';
import { Effect } from '../../../effect';
import { NodeMaterialConnectionPoint } from '../../nodeMaterialBlockConnectionPoint';
import { NodeMaterial, NodeMaterialDefines } from '../../nodeMaterial';
import "../../../../Shaders/ShadersInclude/bonesDeclaration";
import "../../../../Shaders/ShadersInclude/bonesVertex";
import { EffectFallbacks } from '../../../effectFallbacks';
/**
 * Block used to add support for vertex skinning (bones)
 */
export declare class BonesBlock extends NodeMaterialBlock {
    /**
     * Creates a new BonesBlock
     * @param name defines the block name
     */
    constructor(name: string);
    /**
     * Initialize the block and prepare the context for build
     * @param state defines the state that will be used for the build
     */
    initialize(state: NodeMaterialBuildState): void;
    /**
     * Gets the current class name
     * @returns the class name
     */
    getClassName(): string;
    /**
     * Gets the matrix indices input component
     */
    readonly matricesIndices: NodeMaterialConnectionPoint;
    /**
     * Gets the matrix weights input component
     */
    readonly matricesWeights: NodeMaterialConnectionPoint;
    /**
     * Gets the extra matrix indices input component
     */
    readonly matricesIndicesExtra: NodeMaterialConnectionPoint;
    /**
     * Gets the extra matrix weights input component
     */
    readonly matricesWeightsExtra: NodeMaterialConnectionPoint;
    /**
     * Gets the world input component
     */
    readonly world: NodeMaterialConnectionPoint;
    /**
     * Gets the output component
     */
    readonly output: NodeMaterialConnectionPoint;
    autoConfigure(material: NodeMaterial): void;
    provideFallbacks(mesh: AbstractMesh, fallbacks: EffectFallbacks): void;
    bind(effect: Effect, nodeMaterial: NodeMaterial, mesh?: Mesh): void;
    prepareDefines(mesh: AbstractMesh, nodeMaterial: NodeMaterial, defines: NodeMaterialDefines): void;
    protected _buildBlock(state: NodeMaterialBuildState): this;
}
